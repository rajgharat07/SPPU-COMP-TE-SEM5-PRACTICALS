student> db.studentdata.find().pretty()
[
  {
    _id: ObjectId("6546870c001ced33d907b1ce"),
    name: 'Manav',
    marks: 150,
    age: 20
  },
  {
    _id: ObjectId("6546870c001ced33d907b1cf"),
    name: 'Madhushri',
    marks: 200,
    age: 19
  },
  {
    _id: ObjectId("6546870c001ced33d907b1d0"),
    name: 'Rutwik',
    marks: 170,
    age: 19
  }
]
student> db.studentdata.count()
DeprecationWarning: Collection.count() is deprecated. Use countDocuments or estimatedDocumentCount.
3
student> db.studentdata.count()
3
student> db.studentdata.insertOne({name:"Manav",marks:250,age:20})
{
  acknowledged: true,
  insertedId: ObjectId("65471a09c1ea805801069cdd")
}
student> db.studentdata.find().pretty()
[
  {
    _id: ObjectId("6546870c001ced33d907b1ce"),
    name: 'Manav',
    marks: 150,
    age: 20
  },
  {
    _id: ObjectId("6546870c001ced33d907b1cf"),
    name: 'Madhushri',
    marks: 200,
    age: 19
  },
  {
    _id: ObjectId("6546870c001ced33d907b1d0"),
    name: 'Rutwik',
    marks: 170,
    age: 19
  },
  {
    _id: ObjectId("65471a09c1ea805801069cdd"),
    name: 'Manav',
    marks: 250,
    age: 20
  }
]
student> db.studentdata.distinct("name")
[ 'Madhushri', 'Manav', 'Rutwik' ]
student> db.studentdata.aggregate({$project:{name:1,marks:1}})
[
  {
    _id: ObjectId("6546870c001ced33d907b1ce"),
    name: 'Manav',
    marks: 150
  },
  {
    _id: ObjectId("6546870c001ced33d907b1cf"),
    name: 'Madhushri',
    marks: 200
  },
  {
    _id: ObjectId("6546870c001ced33d907b1d0"),
    name: 'Rutwik',
    marks: 170
  },
  {
    _id: ObjectId("65471a09c1ea805801069cdd"),
    name: 'Manav',
    marks: 250
  }
]
student> db.studentdata.aggregate({$project:{name:1}})
[
  { _id: ObjectId("6546870c001ced33d907b1ce"), name: 'Manav' },
  { _id: ObjectId("6546870c001ced33d907b1cf"), name: 'Madhushri' },
  { _id: ObjectId("6546870c001ced33d907b1d0"), name: 'Rutwik' },
  { _id: ObjectId("65471a09c1ea805801069cdd"), name: 'Manav' }
]
student> db.studentdata.aggregate({$project:{name:1}}).pretty()
[
  { _id: ObjectId("6546870c001ced33d907b1ce"), name: 'Manav' },
  { _id: ObjectId("6546870c001ced33d907b1cf"), name: 'Madhushri' },
  { _id: ObjectId("6546870c001ced33d907b1d0"), name: 'Rutwik' },
  { _id: ObjectId("65471a09c1ea805801069cdd"), name: 'Manav' }
]
student> db.studentdata.aggregate({$project:{"name":1}})
[
  { _id: ObjectId("6546870c001ced33d907b1ce"), name: 'Manav' },
  { _id: ObjectId("6546870c001ced33d907b1cf"), name: 'Madhushri' },
  { _id: ObjectId("6546870c001ced33d907b1d0"), name: 'Rutwik' },
  { _id: ObjectId("65471a09c1ea805801069cdd"), name: 'Manav' }
]
student> db.studentdata.aggregate({$group:{_id:name,totalmarks:{$sum:marks}}})
ReferenceError: name is not defined
student> db.studentdata.aggregate({$group:{_id:$name,totalmarks:{$sum:$marks}}})
ReferenceError: $name is not defined
student> db.studentdata.aggregate({$group:{_id:"$name",totalmarks:{$sum:"$marks"}}})
[
  { _id: 'Madhushri', totalmarks: 200 },
  { _id: 'Rutwik', totalmarks: 170 },
  { _id: 'Manav', totalmarks: 400 }
]
student> db.studentdata.aggregate({$group:{_id:"$name",count:{$sum:1}}})
[
  { _id: 'Madhushri', count: 1 },
  { _id: 'Rutwik', count: 1 },
  { _id: 'Manav', count: 2 }
]
student> db.studentdata.find().pretty()
[
  {
    _id: ObjectId("6546870c001ced33d907b1ce"),
    name: 'Manav',
    marks: 150,
    age: 20
  },
  {
    _id: ObjectId("6546870c001ced33d907b1cf"),
    name: 'Madhushri',
    marks: 200,
    age: 19
  },
  {
    _id: ObjectId("6546870c001ced33d907b1d0"),
    name: 'Rutwik',
    marks: 170,
    age: 19
  },
  {
    _id: ObjectId("65471a09c1ea805801069cdd"),
    name: 'Manav',
    marks: 250,
    age: 20
  }
]
student> db.studentdata.aggregate([{$match:{age:{$eq:19}}},{$group:{_id:"$name",totalmarks:{$sum:"$marks"}}},{$sort:{totalmarks:-1}}])
[
  { _id: 'Madhushri', totalmarks: 200 },
  { _id: 'Rutwik', totalmarks: 170 }
]
student> db.studentdata.createIndex({name:1})
name_1
student> db.studentdata.ensureIndex({age:-1})
[ 'age_-1' ]
student> db.studentdata.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { name: 1 }, name: 'name_1' },
  { v: 2, key: { age: -1 }, name: 'age_-1' }
]
student> db.student.createIndex({marks:1},{unique:true})
marks_1
student> db.student.createIndex({name:1},{unique:true})
name_1
student> db.studentdata.createIndex({marks:1},{unique:true})
marks_1
student> db.studentdata.createIndex({name:1},{unique:true})
MongoServerError: An existing index has the same name as the requested index. When index names are not specified, they are auto generated and can cause conflicts. Please refer to our documentation. Requested index: { v: 2, unique: true, key: { name: 1 }, name: "name_1" }, existing index: { v: 2, key: { name: 1 }, name: "name_1" }
student> db.studentdata.dropIndex({name:1})
{ nIndexesWas: 4, ok: 1 }
student> db.studentdata.createIndex({name:1},{unique:true})
MongoServerError: Index build failed: febec8ee-e74f-4a28-98fe-339bf7b97928: Collection student.studentdata ( 4d8a4250-c944-4897-ae79-23a934d898ec ) :: caused by :: E11000 duplicate key error collection: student.studentdata index: name_1 dup key: { name: "Manav" }
student> db.studentdata.createIndex({name:1})
name_1
student> db.studentdata.find({name:'Manav'}).explain("executionStats")
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'student.studentdata',
    indexFilterSet: false,
    parsedQuery: { name: { '$eq': 'Manav' } },
    queryHash: '1AD872C6',
    planCacheKey: '70473A1D',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'FETCH',
        planNodeId: 2,
        inputStage: {
          stage: 'IXSCAN',
          planNodeId: 1,
          keyPattern: { name: 1 },
          indexName: 'name_1',
          isMultiKey: false,
          multiKeyPaths: { name: [] },
          isUnique: false,
          isSparse: false,
          isPartial: false,
          indexVersion: 2,
          direction: 'forward',
          indexBounds: { name: [ '["Manav", "Manav"]' ] }
        }
      },
      slotBasedPlan: {
        slots: '$$RESULT=s11 env: { s1 = TimeZoneDatabase(ROK...Mexico/BajaSur) (timeZoneDB), s2 = Nothing (SEARCH_META), s5 = KS(3C4D616E6176000104), s10 = {"name" : 1}, s3 = 1699162389342 (NOW), s6 = KS(3C4D616E617600FE04) }',
        stages: '[2] nlj inner [] [s4, s7, s8, s9, s10] \n' +
          '    left \n' +
          '        [1] cfilter {(exists(s5) && exists(s6))} \n' +
          '        [1] ixseek s5 s6 s9 s4 s7 s8 [] @"4d8a4250-c944-4897-ae79-23a934d898ec" @"name_1" true \n' +
          '    right \n' +
          '        [2] limit 1 \n' +
          '        [2] seek s4 s11 s12 s7 s8 s9 s10 [] @"4d8a4250-c944-4897-ae79-23a934d898ec" true false \n'
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 2,
    executionTimeMillis: 14,
    totalKeysExamined: 2,
    totalDocsExamined: 2,
    executionStages: {
      stage: 'nlj',
      planNodeId: 2,
      nReturned: 2,
      executionTimeMillisEstimate: 8,
      opens: 1,
      closes: 1,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      totalDocsExamined: 2,
      totalKeysExamined: 2,
      collectionScans: 0,
      collectionSeeks: 2,
      indexScans: 0,
      indexSeeks: 1,
      indexesUsed: [ 'name_1' ],
      innerOpens: 2,
      innerCloses: 1,
      outerProjects: [],
      outerCorrelated: [ Long("4"), Long("7"), Long("8"), Long("9"), Long("10") ],
      outerStage: {
        stage: 'cfilter',
        planNodeId: 1,
        nReturned: 2,
        executionTimeMillisEstimate: 8,
        opens: 1,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        numTested: 1,
        filter: '(exists(s5) && exists(s6)) ',
        inputStage: {
          stage: 'ixseek',
          planNodeId: 1,
          nReturned: 2,
          executionTimeMillisEstimate: 8,
          opens: 1,
          closes: 1,
          saveState: 0,
          restoreState: 0,
          isEOF: 1,
          indexName: 'name_1',
          keysExamined: 2,
          seeks: 1,
          numReads: 3,
          indexKeySlot: 9,
          recordIdSlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          outputSlots: [],
          indexKeysToInclude: '00000000000000000000000000000000',
          seekKeyLow: 's5 ',
          seekKeyHigh: 's6 '
        }
      },
      innerStage: {
        stage: 'limit',
        planNodeId: 2,
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        opens: 2,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        limit: 1,
        inputStage: {
          stage: 'seek',
          planNodeId: 2,
          nReturned: 2,
          executionTimeMillisEstimate: 0,
          opens: 2,
          closes: 1,
          saveState: 0,
          restoreState: 0,
          isEOF: 0,
          numReads: 2,
          recordSlot: 11,
          recordIdSlot: 12,
          seekKeySlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          indexKeySlot: 9,
          indexKeyPatternSlot: 10,
          fields: [],
          outputSlots: []
        }
      }
    }
  },
  command: { find: 'studentdata', filter: { name: 'Manav' }, '$db': 'student' },
  serverInfo: {
    host: 'manav',
    port: 27017,
    version: '7.0.2',
    gitVersion: '02b3c655e1302209ef046da6ba3ef6749dd0b62a'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeEngine'
  },
  ok: 1
}
student> db.studentdata.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { age: -1 }, name: 'age_-1' },
  { v: 2, key: { marks: 1 }, name: 'marks_1', unique: true },
  { v: 2, key: { name: 1 }, name: 'name_1' }
]
student> db.studentdata.dropIndex('name_1')
{ nIndexesWas: 4, ok: 1 }
student> db.studentdata.find({name:"Manav"}).explain(executionStats)
ReferenceError: executionStats is not defined
student> db.studentdata.find({name:"Manav"}).explain("executionStats")
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'student.studentdata',
    indexFilterSet: false,
    parsedQuery: { name: { '$eq': 'Manav' } },
    queryHash: '1AD872C6',
    planCacheKey: 'F46F8B18',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'COLLSCAN',
        planNodeId: 1,
        filter: { name: { '$eq': 'Manav' } },
        direction: 'forward'
      },
      slotBasedPlan: {
        slots: '$$RESULT=s5 env: { s1 = TimeZoneDatabase(ROK...Mexico/BajaSur) (timeZoneDB), s2 = Nothing (SEARCH_META), s3 = 1699162601128 (NOW), s7 = "Manav" }',
        stages: '[1] filter {traverseF(s4, lambda(l1.0) { ((l1.0 == s7) ?: false) }, false)} \n' +
          '[1] scan s5 s6 none none none none lowPriority [s4 = name] @"4d8a4250-c944-4897-ae79-23a934d898ec" true false '
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 2,
    executionTimeMillis: 0,
    totalKeysExamined: 0,
    totalDocsExamined: 4,
    executionStages: {
      stage: 'filter',
      planNodeId: 1,
      nReturned: 2,
      executionTimeMillisEstimate: 0,
      opens: 1,
      closes: 1,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      numTested: 4,
      filter: 'traverseF(s4, lambda(l1.0) { ((l1.0 == s7) ?: false) }, false) ',
      inputStage: {
        stage: 'scan',
        planNodeId: 1,
        nReturned: 4,
        executionTimeMillisEstimate: 0,
        opens: 1,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        numReads: 4,
        recordSlot: 5,
        recordIdSlot: 6,
        fields: [ 'name' ],
        outputSlots: [ Long("4") ]
      }
    }
  },
  command: { find: 'studentdata', filter: { name: 'Manav' }, '$db': 'student' },
  serverInfo: {
    host: 'manav',
    port: 27017,
    version: '7.0.2',
    gitVersion: '02b3c655e1302209ef046da6ba3ef6749dd0b62a'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeEngine'
  },
  ok: 1
}
student> db.studentdata.createIndex({name:1})
name_1
student> db.studentdata.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { age: -1 }, name: 'age_-1' },
  { v: 2, key: { marks: 1 }, name: 'marks_1', unique: true },
  { v: 2, key: { name: 1 }, name: 'name_1' }
]
student> db.studentdata.find({name:"Manav"}).explain("executionStats")
{
  explainVersion: '2',
  queryPlanner: {
    namespace: 'student.studentdata',
    indexFilterSet: false,
    parsedQuery: { name: { '$eq': 'Manav' } },
    queryHash: '1AD872C6',
    planCacheKey: 'AC618571',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      queryPlan: {
        stage: 'FETCH',
        planNodeId: 2,
        inputStage: {
          stage: 'IXSCAN',
          planNodeId: 1,
          keyPattern: { name: 1 },
          indexName: 'name_1',
          isMultiKey: false,
          multiKeyPaths: { name: [] },
          isUnique: false,
          isSparse: false,
          isPartial: false,
          indexVersion: 2,
          direction: 'forward',
          indexBounds: { name: [ '["Manav", "Manav"]' ] }
        }
      },
      slotBasedPlan: {
        slots: '$$RESULT=s11 env: { s1 = TimeZoneDatabase(ROK...Mexico/BajaSur) (timeZoneDB), s2 = Nothing (SEARCH_META), s5 = KS(3C4D616E6176000104), s10 = {"name" : 1}, s3 = 1699162658296 (NOW), s6 = KS(3C4D616E617600FE04) }',
        stages: '[2] nlj inner [] [s4, s7, s8, s9, s10] \n' +
          '    left \n' +
          '        [1] cfilter {(exists(s5) && exists(s6))} \n' +
          '        [1] ixseek s5 s6 s9 s4 s7 s8 [] @"4d8a4250-c944-4897-ae79-23a934d898ec" @"name_1" true \n' +
          '    right \n' +
          '        [2] limit 1 \n' +
          '        [2] seek s4 s11 s12 s7 s8 s9 s10 [] @"4d8a4250-c944-4897-ae79-23a934d898ec" true false \n'
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 2,
    executionTimeMillis: 5,
    totalKeysExamined: 2,
    totalDocsExamined: 2,
    executionStages: {
      stage: 'nlj',
      planNodeId: 2,
      nReturned: 2,
      executionTimeMillisEstimate: 0,
      opens: 1,
      closes: 1,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      totalDocsExamined: 2,
      totalKeysExamined: 2,
      collectionScans: 0,
      collectionSeeks: 2,
      indexScans: 0,
      indexSeeks: 1,
      indexesUsed: [ 'name_1' ],
      innerOpens: 2,
      innerCloses: 1,
      outerProjects: [],
      outerCorrelated: [ Long("4"), Long("7"), Long("8"), Long("9"), Long("10") ],
      outerStage: {
        stage: 'cfilter',
        planNodeId: 1,
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        opens: 1,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        numTested: 1,
        filter: '(exists(s5) && exists(s6)) ',
        inputStage: {
          stage: 'ixseek',
          planNodeId: 1,
          nReturned: 2,
          executionTimeMillisEstimate: 0,
          opens: 1,
          closes: 1,
          saveState: 0,
          restoreState: 0,
          isEOF: 1,
          indexName: 'name_1',
          keysExamined: 2,
          seeks: 1,
          numReads: 3,
          indexKeySlot: 9,
          recordIdSlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          outputSlots: [],
          indexKeysToInclude: '00000000000000000000000000000000',
          seekKeyLow: 's5 ',
          seekKeyHigh: 's6 '
        }
      },
      innerStage: {
        stage: 'limit',
        planNodeId: 2,
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        opens: 2,
        closes: 1,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        limit: 1,
        inputStage: {
          stage: 'seek',
          planNodeId: 2,
          nReturned: 2,
          executionTimeMillisEstimate: 0,
          opens: 2,
          closes: 1,
          saveState: 0,
          restoreState: 0,
          isEOF: 0,
          numReads: 2,
          recordSlot: 11,
          recordIdSlot: 12,
          seekKeySlot: 4,
          snapshotIdSlot: 7,
          indexIdentSlot: 8,
          indexKeySlot: 9,
          indexKeyPatternSlot: 10,
          fields: [],
          outputSlots: []
        }
      }
    }
  },
  command: { find: 'studentdata', filter: { name: 'Manav' }, '$db': 'student' },
  serverInfo: {
    host: 'manav',
    port: 27017,
    version: '7.0.2',
    gitVersion: '02b3c655e1302209ef046da6ba3ef6749dd0b62a'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeEngine'
  },
  ok: 1
}
student> db.studentdata.find()
[
  {
    _id: ObjectId("6546870c001ced33d907b1ce"),
    name: 'Manav',
    marks: 150,
    age: 20
  },
  {
    _id: ObjectId("6546870c001ced33d907b1cf"),
    name: 'Madhushri',
    marks: 200,
    age: 19
  },
  {
    _id: ObjectId("6546870c001ced33d907b1d0"),
    name: 'Rutwik',
    marks: 170,
    age: 19
  },
  {
    _id: ObjectId("65471a09c1ea805801069cdd"),
    name: 'Manav',
    marks: 250,
    age: 20
  }
]
student> db.studentdata.save({_id:ObjectId("6546870c001ced33d907b1ce"),name:"Manavi",marks:150,age:20})
TypeError: db.studentdata.save is not a function
student> db.studentdata.save({_id:ObjectId("6546870c001ced33d907b1ce"),name:"Manavi",marks:300,age:21})
TypeError: db.studentdata.save is not a function
student>
